<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SFS Internal Audit Sampling Tool</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <style>
        .custom-alert { display: none; margin-top: 10px; }
        .methodology-details { display: none; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>SFS Internal Audit Sampling Tool</h1>
            <button class="btn btn-outline-secondary" onclick="resetTool()">Reset Tool</button>
        </div>

        <!-- Control Type and Frequency Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">1. Control Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Control Type:</label>
                            <select class="form-select" id="controlType">
                                <option value="manual">Manual Control</option>
                                <option value="automated">Automated Control</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6" id="manualControls">
                        <div class="mb-3">
                            <label class="form-label">Control Frequency:</label>
                            <select class="form-select" id="controlFrequency">
                                <option value="annual">Annual (1/year)</option>
                                <option value="quarterly">Quarterly (4/year)</option>
                                <option value="monthly">Monthly (12/year)</option>
                                <option value="weekly">Weekly (52/year)</option>
                                <option value="daily">Daily (365/year)</option>
                                <option value="multiple">Multiple times per day (365+/year)</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="alert alert-info">
                            <strong>Required Sample Size: </strong><span id="requiredSampleSize">-</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Population Data Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">2. Population Data</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <!-- Google Sheets Input -->
                        <div class="mb-3">
                            <label for="sheetUrl" class="form-label">Google Sheet URL:</label>
                            <input type="text" class="form-control" id="sheetUrl" 
                                   placeholder="Paste Google Sheets URL here">
                            <div class="form-text">Make sure the sheet is shared with "Anyone with the link can view"</div>
                            <button class="btn btn-primary mt-2" onclick="loadGoogleSheet()">Load from Sheets</button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <!-- Excel File Input -->
                        <div class="mb-3">
                            <label for="excelFile" class="form-label">Excel File:</label>
                            <input type="file" class="form-control" id="excelFile" accept=".xlsx,.xls">
                            <button class="btn btn-primary mt-2" onclick="loadExcelFile()">Load from Excel</button>
                        </div>
                    </div>
                </div>

                <div id="populationInfo" class="alert alert-info custom-alert"></div>
            </div>
        </div>

        <!-- Sampling Methodology -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">3. Sampling Methodology</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Selection Method:</label>
                            <select class="form-select" id="selectionMethod">
                                <optgroup label="Random">
                                    <option value="simple">Simple Random Sample (Preferred)</option>
                                    <option value="stratified">Stratified Sample</option>
                                    <option value="cluster">Clustered Sample</option>
                                    <option value="statistical">Statistical (OCC Methodology)</option>
                                </optgroup>
                                <optgroup label="Non-Random">
                                    <option value="judgmental">Judgmental</option>
                                    <option value="adhoc">Ad hoc</option>
                                </optgroup>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sample Generation -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">4. Generate Sample</h5>
            </div>
            <div class="card-body">
                <button type="button" class="btn btn-primary mb-3" onclick="generateSample()">Generate Sample</button>
                <button type="button" class="btn btn-success mb-3 ms-2" onclick="exportToExcel()">Export to Excel</button>
                <div id="sampleTableContainer" style="display: none;">
                    <table id="sampleTable" class="table table-striped">
                        <thead>
                            <tr id="tableHeaders"></tr>
                        </thead>
                        <tbody id="tableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Required Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

    <script>
        let populationData = [];
        let sampleData = [];
        let dataTable = null;
        let auditLog = [];

        // Minimum sample sizes based on frequency
        const frequencySamples = {
            'annual': 1,
            'quarterly': 2,
            'monthly': 2,
            'weekly': 5,
            'daily': 25,
            'multiple': 25
        };

        // Update required sample size when control type or frequency changes
        function updateRequiredSampleSize() {
            const controlType = document.getElementById('controlType').value;
            const frequency = document.getElementById('controlFrequency').value;
            const manualControls = document.getElementById('manualControls');

            if (controlType === 'automated') {
                manualControls.style.display = 'none';
                document.getElementById('requiredSampleSize').textContent = '1';
            } else {
                manualControls.style.display = 'block';
                document.getElementById('requiredSampleSize').textContent = frequencySamples[frequency];
            }
        }

        // Event listeners for control type and frequency
        document.getElementById('controlType').addEventListener('change', updateRequiredSampleSize);
        document.getElementById('controlFrequency').addEventListener('change', updateRequiredSampleSize);

        // Load Google Sheet
        async function loadGoogleSheet() {
            const url = document.getElementById('sheetUrl').value;
            const sheetId = extractSheetId(url);
            
            if (!sheetId) {
                alert('Invalid Google Sheets URL');
                return;
            }

            try {
                const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv`;
                const response = await fetch(csvUrl);
                if (!response.ok) throw new Error('Failed to load sheet');
                
                const csvText = await response.text();
                populationData = parseCSV(csvText);
                
                document.getElementById('populationInfo').style.display = 'block';
                document.getElementById('populationInfo').innerHTML = 
                    `Population loaded: ${populationData.length} items`;

                // Add to audit log
                addToAuditLog('Population loaded from Google Sheets', {
                    source: 'Google Sheets',
                    url: url,
                    populationSize: populationData.length
                });
            } catch (error) {
                alert('Error loading sheet: ' + error.message);
            }
        }

        function loadExcelFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Please select an Excel file');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, {type: 'array'});
                    
                    // Get first sheet
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    
                    // Convert to JSON
                    populationData = XLSX.utils.sheet_to_json(firstSheet);
                    
                    document.getElementById('populationInfo').style.display = 'block';
                    document.getElementById('populationInfo').innerHTML = 
                        `Population loaded: ${populationData.length} items`;

                    // Add to audit log
                    addToAuditLog('Population loaded from Excel', {
                        source: 'Excel File',
                        filename: file.name,
                        populationSize: populationData.length
                    });
                } catch (error) {
                    alert('Error loading Excel file: ' + error.message);
                }
            };
            reader.readAsArrayBuffer(file);
        }

        function extractSheetId(url) {
            const match = url.match(/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
            return match ? match[1] : null;
        }

        function parseCSV(csv) {
            const lines = csv.split('\n');
            const headers = lines[0].split(',').map(h => h.trim());
            const result = [];
            
            for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue;
                const obj = {};
                const currentline = lines[i].split(',');
                
                headers.forEach((header, j) => {
                    obj[header] = currentline[j] ? currentline[j].trim() : '';
                });
                result.push(obj);
            }
            
            return result;
        }

        function generateSample() {
            if (!populationData || populationData.length === 0) {
                alert('Please load population data first');
                return;
            }

            const sampleSize = parseInt(document.getElementById('requiredSampleSize').textContent);
            const selectionMethod = document.getElementById('selectionMethod').value;
            const indices = new Set();
            
            // Add to audit log before generating
            addToAuditLog('Starting sample generation', {
                method: selectionMethod,
                requiredSize: sampleSize,
                populationSize: populationData.length
            });
            
            while (indices.size < sampleSize && indices.size < populationData.length) {
                indices.add(Math.floor(Math.random() * populationData.length));
            }
            
            sampleData = Array.from(indices).map(i => populationData[i]);

            // Add to audit log after generating
            addToAuditLog('Sample generated', {
                actualSize: sampleData.length,
                selectedIndices: Array.from(indices)
            });

            displaySampleTable(sampleData);
        }

        function displaySampleTable(data) {
            const container = document.getElementById('sampleTableContainer');
            const headers = document.getElementById('tableHeaders');
            const body = document.getElementById('tableBody');

            headers.innerHTML = '';
            body.innerHTML = '';

            if (data.length > 0) {
                Object.keys(data[0]).forEach(key => {
                    headers.innerHTML += `<th>${key}</th>`;
                });
            }

            data.forEach(row => {
                let tr = '<tr>';
                Object.values(row).forEach(value => {
                    tr += `<td>${value}</td>`;
                });
                tr += '</tr>';
                body.innerHTML += tr;
            });

            if (dataTable) {
                dataTable.destroy();
            }
            dataTable = $('#sampleTable').DataTable({
                pageLength: 10,
                ordering: true,
                searching: true
            });

            container.style.display = 'block';
        }

        // Add audit log functions
        function addToAuditLog(action, details) {
            const timestamp = new Date().toISOString();
            const logEntry = {
                timestamp: timestamp,
                action: action,
                details: details,
                user: 'User',
                controlType: document.getElementById('controlType').value,
                controlFrequency: document.getElementById('controlFrequency').value
            };
            auditLog.push(logEntry);
        }

        function getAuditLogForExport() {
            return auditLog.map(entry => [
                entry.timestamp,
                entry.action,
                JSON.stringify(entry.details),
                entry.controlType,
                entry.controlFrequency
            ]);
        }

        function exportToExcel() {
            if (sampleData.length === 0) {
                alert('Please generate a sample first');
                return;
            }

            const wb = XLSX.utils.book_new();

            // Sample sheet
            const ws_sample = XLSX.utils.json_to_sheet(sampleData);
            XLSX.utils.book_append_sheet(wb, ws_sample, "Sample");

            // Metadata sheet
            const metadata = [
                ["Parameter", "Value"],
                ["Date Generated", new Date().toLocaleString()],
                ["Control Type", document.getElementById('controlType').value],
                ["Control Frequency", document.getElementById('controlFrequency').value],
                ["Selection Method", document.getElementById('selectionMethod').value],
                ["Population Size", populationData.length],
                ["Sample Size", sampleData.length],
                ["", ""],  // Empty row for spacing
                ["Audit Log", ""],
                ["Timestamp", "Action", "Details", "Control Type", "Control Frequency"]
            ];

            // Add audit log entries
            metadata.push(...getAuditLogForExport());

            const ws_metadata = XLSX.utils.aoa_to_sheet(metadata);
            XLSX.utils.book_append_sheet(wb, ws_metadata, "Metadata");

            // Save file
            XLSX.writeFile(wb, `sfs_audit_sample_${new Date().toISOString().slice(0,19).replace(/[:-]/g, "")}.xlsx`);

            // Add export action to audit log
            addToAuditLog('Sample exported to Excel', {
                filename: `sfs_audit_sample_${new Date().toISOString().slice(0,19).replace(/[:-]/g, "")}.xlsx`,
                sampleSize: sampleData.length
            });
        }

        function resetTool() {
            if (!confirm('Are you sure you want to reset the tool? This will clear all data and selections.')) {
                return;
            }
            
            // Reset variables
            populationData = [];
            sampleData = [];
            auditLog = [];
            
            // Reset form elements
            document.getElementById('controlType').value = 'manual';
            document.getElementById('controlFrequency').value = 'annual';
            document.getElementById('sheetUrl').value = '';
            document.getElementById('excelFile').value = '';
            document.getElementById('selectionMethod').value = 'simple';
            
            // Reset display elements
            document.getElementById('populationInfo').style.display = 'none';
            document.getElementById('sampleTableContainer').style.display = 'none';
            
            // Reset DataTable if it exists
            if (dataTable) {
                dataTable.destroy();
                dataTable = null;
            }
            
            // Update required sample size
            updateRequiredSampleSize();
        }

        // Initialize
        updateRequiredSampleSize();
    </script>
</body>
</html>
